#!/bin/bash

##########dDocent 0.5##########


#This script serves as an interactive bash wrapper to QC, assemble, map, and call SNPs from double digest RAD data.
#It requires that your raw data are split up by tagged individual and follow the naming convenction of:

#Pop_Sample1.F.fq and Pop_Sample1.R.fq


#Prints out title and contact info
echo -e "dDocent 0.5 by J. Puritz for Gold lab \n"
echo -e "Contact jpuritz@gmail.com with any problems \n\n "

#This code checks for individual fq labels labeled with the right convention
NumInd=$(ls *.F.fq | wc -l)
NumInd=$(($NumInd - 0))

if [ $NumInd -gt 9 ]
        then
	MinAll=0.05
        MaxSize=9
        else
	MinAll=$(echo "scale=2; 1 / (2 * $NumInd) " | bc)
        MaxSize=$(( $NumInd - 1 ))
fi

#Create list of sample names
ls *.F.fq > namelist
sed -i 's/.F.fq//g' namelist
NAMES=( `cat "namelist" `)

#Create list of samples by size
ls -S *.F.fq > sizelist
sed -i 's/.F.fq//g' sizelist
SIZE=( `cat "sizelist" `)

##########User Input Section##########
#This code gets input from the user and assigns variables
######################################

#This checks that dDocent has detected the proper number of individuals and exits if incorrect
echo "$NumInd individuals are detected is this correct? Enter yes or no and press [ENTER]"

read Indcorrect

if [ "$Indcorrect" == "no" ]; then
        echo "Please double check that all fastq files are named Ind01.F.fq and Ind01.R.fq"
        exit 1
elif [ "$Indcorrect" == "yes" ]; then
    	echo "Proceeding with $NumInd individuals"
else
	echo "Incorrect Input"
	exit 1
fi

#Tries to get number of processors, if not asks user
NUMProc=( `grep -c ^processor /proc/cpuinfo 2> /dev/null` ) 
NUMProc=$(($NUMProc + 0)) 

if [ $NUMProc -lt 1 ]; then
	echo "Please enter the number of processing cores on this computer"
	read NUMProc
fi	
if [ $NUMProc -lt 1 ]; then
	echo "Incorrect. Please enter the number of processing cores on this computer"
	read NUMProc
fi		
if [ $NUMProc -lt 1 ]; then
	echo "Incorrect input, exiting"
	exit 1
fi

NUMThr=$(($NUMProc / 4))

#Asks user for amount of memory to use
echo "Please enter the maximum amount of memory to dedicate to dDocent in Gigabytes"

read MemMax
MemMax=$(($MemMax + 0))

if [ $MemMax -lt 1 ]; then
	echo "Incorrect. Please enter the maximum amount of memory to dedicate to dDocent in Gigabytes"
	read MemMax
	MemMax=$(($MemMax + 0))
fi	
if [ $MemMax -lt 1 ]; then
	echo "Incorrect. Please enter the maximum amount of memory to dedicate to dDocent in Gigabytes"
	read MemMax
	MemMax=$(($MemMax + 0))
fi	
if [ $MemMax -lt 1 ]; then
	echo "Incorrect input, exiting"
	exit 1
fi

SmallMem=$(($MemMax / 4))
LargeMem=$(($MemMax * 2 / 3))

 

#Asks if user wants to trim reads.  This allows this part of the pipeline to be skipped during subsequent analyses
echo -e "\nDo you want to quality trim your reads?" 
echo "Type yes or no and press [ENTER]?"

read TRIM

#Asks if user wants to perform an assembly.  This allows this part of the pipeline to be skipped during subsequent analyses

echo -e "\nDo you want to perform an assembly?"
echo "Type yes or no and press [ENTER]?"

read ASSEMBLY

if [ "$ASSEMBLY" == "no" ]; then
	echo -e "\nReference contigs need to be in a file named reference.fasta\n"
	sleep 1
fi

#If performing de novo assembly, asks if the user wants to enter a different -c value
if [ "$ASSEMBLY" == "yes" ]; then
	echo "Reads will be assembled with Rainbow"
    echo "CD-HIT will cluster reference sequences by similarity. The -c parameter (% similarity to cluster) may need to be changed for your taxa."
    echo "Would you like to enter a new c parameter now? Type yes or no and press [ENTER]"
    read optC
    echo $optC
    if [ "$optC" == "no" ]; then
            echo "Proceeding with default 0.9 value."
            simC=0.9
        elif [ "$optC" == "yes" ]; then
            echo "Please enter new value for c. Enter in decimal form (For 90%, enter 0.9)"
            read newC
            simC=$newC
        else
            echo "Incorrect input. Proceeding with the default value."
            simC=0.9
        fi
fi

#Asks if user wants to map reads and change default mapping variables for BWA
echo "Do you want to map reads?  Type yes or no and press [ENTER]"
read MAP
if [ "$MAP" == "no" ]; then
	echo "Mapping will not be performed"
	optA=1
    optB=4
    optO=6
	else
		echo "BWA will be used to map reads.  You may need to adjust -A -B and -O parameters for your taxa."
		echo "Would you like to enter a new parameters now? Type yes or no and press [ENTER]"
		read optq

	if [ "$optq" == "yes" ]; then
        echo "Please enter new value for A (match score).  It should be an integer.  Default is 1."
        read newA
        optA=$newA
                echo "Please enter new value for B (mismatch score).  It should be an integer.  Default is 4."
        read newB
        optB=$newB
                echo "Please enter new value for O (gap penalty).  It should be an integer.  Default is 6."
        read newO
        optO=$newO
	else
                echo "Proceeding with default values for BWA read mapping."
                optA=1
                optB=4
                optO=6
	fi
fi
	

#Asks user for email address to notify when analysis is complete
echo ""
echo "Please enter your email address.  dDocent will email you when it is finished running."
echo "Don't worry; dDocent has no financial need to sell your email address to spammers."
read MAIL
echo ""
echo ""

if [ "$ASSEMBLY" == "no" ]; then
#Prints instructions on how to move analysis to background and disown process
echo "At this point, all configuration information has been enter and dDocent may take several hours to run." 
echo "It is recommended that you move this script to a background operation and disable terminal input and output."
echo "All data and logfiles will still be recorded."
echo "To do this:"
echo "Press control and Z simultaneously"
echo "Type 'bg' without the quotes and press enter"
echo "Type 'disown -h' again without the quotes and press enter"
echo ""
echo "Now sit back, relax, and wait for your analysis to finish."
fi

if [ "$ASSEMBLY" == "yes" ]; then
echo "dDocent will require input during the assembly stage.  Please wait until prompt says it is safe to move program to the background."
fi


#Wrapper for main program functions.  This allows the entire file to be read first before execution
main(){

#Sets a start time variable
STARTTIME=$(date)

#STACKS adds a strange _1 or _2 character to the end of processed reads, this looks for checks for errant characters and replaces them

STACKS=$(head -1 ${NAMES[0]}.F.fq | mawk '/\/1/')

if [ -z "$STACKS" ]; then

	echo "Removing the _1 character and replacing with /1 in the name of every sequence"
	for i in "${NAMES[@]}"
	do	
	sed -e 's:_2$:/2:g' $i.R.fq > $i.Ra.fq
	sed -e 's:_1$:/1:g' $i.F.fq > $i.Fa.fq
	mv $i.Ra.fq $i.R.fq
	mv $i.Fa.fq $i.F.fq
	done

fi

#This allows for simultaneous assembly and quality trimming, if needed

if [[ "$TRIM" == "yes" && "$ASSEMBLY" == "yes" ]]; then
	echo "Trimming reads and simultaneously assemblying reference sequences"	
	TrimReads & 2> trim.log
	Assemble
	#setupRainbow 2> rainbow.log
	wait
fi

if [[ "$TRIM" == "yes" && "$ASSEMBLY" != "yes" ]]; then
	echo "Trimming reads"
	TrimReads 2> trim.log
fi		
		
if [[ "$TRIM" != "yes" && "$ASSEMBLY" == "yes" ]]; then		
	Assemble
	#setupRainbow 2> rainbow.log
fi


##Assembly

##Use BWA to map reads to assembly

#This code checks if the reference indexes need to be remade, if mapping
if [ "$MAP" != "no" ]; then
echo "Using BWA to map reads."
	if [ -f ./reference.dict ]; then
	rm reference.dict
	java -jar /usr/local/bin/CreateSequenceDictionary.jar R=reference.fasta O=reference.dict
	else
	java -jar /usr/local/bin/CreateSequenceDictionary.jar R=reference.fasta O=reference.dict
	fi
	samtools faidx reference.fasta
	bwa index reference.fasta &> index.log
	
	#BWA for mapping for all samples
	for i in "${NAMES[@]}"
	do
	bwa mem reference.fasta $i.R1.fq $i.R2.fq -t $NUMProc -a -M -T 10 -A $optA -B $optB -O $optO -R "@RG\tID:$i\tSM:$i\tPL:Illumina" > $i.sam 2> bwa.$i.log
	done
fi


##Creating realignment intervals if needed, CreateIntervals function is defined later in script

#If mapping is being performed, intervals are created automatically

if [ "$MAP" != "no" ]; then
echo "Creating realignment intervals"
CreateIntervals 
fi

#If mapping is not being performed, but intervals do not exist they are created
if [[ "$MAP" == "no" && ! -f "merged.intervals" ]]; then
CreateIntervals 
fi


##SAM to BAM conversion

#If mapping in not being performed, checks to see that there are BAM files

Len=$(($NumInd - 1))

if [[ "$MAP" == "no" && ! -f "${NAMES[$Len]}-RGa.bam" ]]; then
echo "Creating BAM Files"
#Convert Sam to Bam 
pBAM
fi

#If mapping, automatic conversion
if [ "$MAP" != "no" ]; then
echo "Creating BAM files"
#Convert Sam to Bam
pBAM
fi

wait

##Realignment around INDELS

#If mapping in not being performed, checks to see if BAM files need to be realigned
if [[ "$MAP" == "no" && ! -f "${NAMES[$Len]}-RG.reduced.bam" ]]; then
echo "Realigning BAM files"
pAlign
fi

#If mapping, automatic realignment
if [ "$MAP" != "no" ]; then
echo "Realigning BAM files"
pAlign
fi

wait

##SNP Calling

#Create list of BAM files
ls *-RG.reduced.bam >bamlist.list

#Check to make sure interval files have been created
if [[ "$MAP" == "no" && ! -f "map.bed" ]]; then
bamToBed -i cat-RG.bam > map.bed
bedtools merge -i map.bed > mapped.bed
fi

#Split interval files for scatter gather of SNP calling
NumMaps=$(cat mapped.bed | wc -l)
NumMaps=$(( $NumMaps / 4 ))
split -l $NumMaps mapped.bed map
mv mapaa mapped.1.bed
mv mapab mapped.2.bed
mv mapac mapped.3.bed
mv mapad mapped.4.bed
cat mapae >> mapped.4.bed

#Create list of populations
cp namelist poplist
sed -i 's/_.*//g' poplist | uniq > pop.names
uniq poplist > pop.names

#Split BAM list by groups of populations for scatter gather of SNP calling
POPS=1
POPNAMES=( `cat "pop.names" `)
for i in "${POPNAMES[@]}"
	do	
	mawk -v lvar=$i '$0~lvar' bamlist.list > bamlist.$POPS.list
	POPS=$(($POPS + 1)) 
	done

NumPop=${#POPNAMES[@]}
NumPop=$(($NumPop - 0))

i=1
p=1

while [ $i -le $NumPop ]
do
	j=$(($i+1))
	k=$(($j+1))
	cat bamlist.$i.list bamlist.$j.list bamlist.$k.list > bamlist.a.list 2> /dev/null
	rm bamlist.$j.list bamlist.$k.list bamlist.$i.list 2> /dev/null
	mv bamlist.a.list bamlist.$p.list 2> /dev/null
	p=$(($p+1))
	i=$(($i+3))
done

NumPop=$(($NumPop / 3))
NumPop=$(($NumPop + 1))


#Call SNPs for groups of populations over several intervals
for ((i = 1; i <= $NumPop; i++));
	do
	if [ -a "bamlist.$i.list" ]; then
	GenotypePop $i &
	fi
	done
wait

#Gather SNP calls
if [ -f "rawVariants.pop.2.vcf" ]; then
	java -Xmx${SmallMem}g -jar /usr/local/bin/GenomeAnalysisTK.jar \
	-T CombineVariants -R reference.fasta -V rawVariants.pop.1.vcf -V rawVariants.pop.2.vcf \
	-o rawVariants.F.2.vcf -genotypeMergeOptions UNSORTED -mergeInfoWithMaxAC

	for ((i = 3; i <= $NumPop; i++));
		do
		if [ -f "rawVariants.pop.$i.vcf" ]; then
			k=$(($i-1))
			java -Xmx${SmallMem}g -jar /usr/local/bin/GenomeAnalysisTK.jar \
			-T CombineVariants -R reference.fasta -V rawVariants.pop.$i.vcf -V rawVariants.F.$k.vcf \
			-o rawVariants.F.$i.vcf -genotypeMergeOptions UNSORTED -mergeInfoWithMaxAC
			rm rawVariants.F.$k.vcf
		fi
   		done
   		mv rawVariants.F.*.vcf rawVariants.vcf
else
	mv rawVariants.pop.1.vcf rawVariants.vcf
fi


#Use VCFtools to limit the number of SNPs for annotation
vcftools --vcf rawVariants.vcf --geno 0.25 --mac 1 --recode --recode-INFO-all --out rawVariants

mv rawVariants.vcf rawVariants.all.vcf
mv rawVariants.recode.vcf rawVariants.vcf

#Annotate SNPS   	
java -Xmx${MemMax}g -jar /usr/local/bin/GenomeAnalysisTK.jar \
-T VariantAnnotator \
-R reference.fasta \
-I bamlist.list \
-A Coverage -A QualByDepth -A MappingQualityRankSumTest -A ReadPosRankSumTest -A MappingQualityZero -A DepthPerAlleleBySample \
-V:variant,VCF rawVariants.vcf \
-o rawVariants-annotated.vcf \
-rf BadCigar \
-L rawVariants.vcf -dcov 200 -XA FisherStrand \
-nt $NUMThr -log VA.log --logging_level INFO  &>VA.error.log

#Filter for High Quality SNPs
java -Xmx${SmallMem}g -jar /usr/local/bin/GenomeAnalysisTK.jar \
-T VariantFiltration \
-R reference.fasta \
-V rawVariants-annotated.vcf \
--filterExpression "MQ0 >= 4 && ((MQ0 / (1.0 * DP)) > 0.1)" \
--filterName "BadValidation" \
--filterExpression "QUAL < 30.0" \
--filterName "LowQual" \
--filterExpression "QD < 5.0" \
--filterName "LowQD" \
-o Q30-Variants.vcf 

cat Q30-Variants.vcf | grep 'PASS\|^#' > PASS-Q30-Variants.vcf

#Create separate high quality SNP file and INDEL files
java -Xmx${SmallMem}g -jar /usr/local/bin/GenomeAnalysisTK.jar \
   -R reference.fasta \
   -T SelectVariants \
   --variant PASS-Q30-Variants.vcf \
   -o INDEL-Q30.vcf \
   -selectType INDEL

java -Xmx${SmallMem}g -jar /usr/local/bin/GenomeAnalysisTK.jar \
   -R reference.fasta \
   -T SelectVariants \
   --variant PASS-Q30-Variants.vcf \
   -o SNP-Q30.vcf \
   -selectType SNP
   
##Use Variant Quality Score Recalibration for lower quality SNPs

#Select out lower quality SNPs
java -Xmx${SmallMem}g -jar /usr/local/bin/GenomeAnalysisTK.jar \
-T VariantFiltration \
-R reference.fasta \
-V rawVariants-annotated.vcf \
--clusterWindowSize 0 \
--filterExpression "MQ0 >= 4 && ((MQ0 / (1.0 * DP)) > 0.1)" \
--filterName "BadValidation" \
--filterExpression "QUAL < 5.0" \
--filterName "LowQual" \
--filterExpression "QD < 5.0" \
--filterName "LowQD" \
-o Q15-Variants.vcf 
  
#Calculate SNP recalibration
java -Xmx${SmallMem}g -jar /usr/local/bin/GenomeAnalysisTK.jar \
   -T VariantRecalibrator \
   -R reference.fasta \
   -input Q15-Variants.vcf \
   -resource:VCF,known=true,training=true,truth=true,prior=10.0 SNP-Q30.vcf \
   -an QD -an MQRankSum -an ReadPosRankSum -an DP \
   -recalFile VQSR.recal \
   -tranchesFile VQSR.tranches \
   -rscriptFile VQSR.plots.R \
   --ignore_filter BadValidation \
   --ignore_filter LowQual \
   --ignore_filter LowQD \
   -mode SNP &>VQSRSNP.error.log
#Calculate INDEL recalibration
java -Xmx${SmallMem}g -jar /usr/local/bin/GenomeAnalysisTK.jar \
   -T VariantRecalibrator \
   -R reference.fasta \
   -input Q15-Variants.vcf \
   -resource:VCF,known=true,training=true,truth=true,prior=10.0 INDEL-Q30.vcf \
   -an DP -an ReadPosRankSum -an MQRankSum \
   -recalFile VQSRI.recal \
   -tranchesFile VQSRI.tranches \
   -rscriptFile VQSRI.plots.R \
   --ignore_filter BadValidation \
   --ignore_filter LowQual \
   --ignore_filter LowQD \
   --maxGaussians 4 \
   -mode INDEL &>VQSRINDEL.error.log
     
#Apply SNP recalibration   
java -Xmx${SmallMem}g -jar /usr/local/bin/GenomeAnalysisTK.jar \
   -T ApplyRecalibration \
   -R reference.fasta \
   -input Q15-Variants.vcf \
   --ts_filter_level 99.9 \
   --ignore_filter BadValidation \
   --ignore_filter LowQual \
   --ignore_filter LowQD \
   -tranchesFile VQSR.tranches \
   -recalFile VQSR.recal \
   -mode SNP \
   -o recalibrated_SNPS.rawIndels.vcf

#Apply INDEL recalibration
java -Xmx${SmallMem}g -jar /usr/local/bin/GenomeAnalysisTK.jar \
   -T ApplyRecalibration \
   -R reference.fasta \
   -input recalibrated_SNPS.rawIndels.vcf \
   --ts_filter_level 99.9 \
   --ignore_filter BadValidation \
   --ignore_filter LowQual \
   --ignore_filter LowQD \
   -tranchesFile VQSRI.tranches \
   -recalFile VQSRI.recal \
   -mode INDEL \
   -o VQSR.Variant.vcf   

#Create separate vcf files for SNPs and INDEls   
java -Xmx${SmallMem}g -jar /usr/local/bin/GenomeAnalysisTK.jar \
   -R reference.fasta \
   -T SelectVariants \
   --variant VQSR.Variant.vcf \
   -o INDEL-VQSR.vcf \
   -selectType INDEL

java -Xmx${SmallMem}g -jar /usr/local/bin/GenomeAnalysisTK.jar \
   -R reference.fasta \
   -T SelectVariants \
   --variant VQSR.Variant.vcf \
   -o SNP-VQSR.vcf \
   -selectType SNP   
   
#Create a vcf with only passing SNPs
cat SNP-VQSR.vcf | grep 'VQSLOD\|^#' | grep -v TruthSensitivityTranche > SNP-VQSR-PASS.vcf

echo "Using VCFtools to parse SNPS.vcf for SNPS that are called in at least 90% of individuals"
vcftools --vcf SNP-VQSR-PASS.vcf --geno 0.9 --out Final --counts --recode --non-ref-af 0.001 --max-non-ref-af 0.9999 --mac 1 --recode-INFO-all &>VCFtools.log


##Checking for possible errors

if [ "$MAP" != "no" ]; then
ERROR1=$(mawk '/developer/' bwa* | wc -l)
fi
ERROR2=$(mawk '/error/' *.bam.log | wc -l)
ERROR3=$(mawk '/ERROR/' VQSR*.error.log | wc -l)
ERRORS=$(($ERROR1 + $ERROR2 + $ERROR3))

#Move various log files to own directory
if [ ! -d "logfiles" ]; then
mkdir logfiles
fi
mv *.txt *.log log ./logfiles 2> /dev/null

#Sending a completion email

if [ $ERRORS -gt 0 ]; then
	echo -e "dDocent has finished with errors in" `pwd` "\n\ndDocent started" $STARTTIME "\n\ndDocent finished"`date` "\n\nPlease check log files\n\n" `mawk '/After filtering, kept .* out of a possible/' ./logfiles/Final.log` "\n\ndDocent 0.5 \nThe 'd' is silent, hillbilly." | mailx -s "dDocent has finished with ERRORS!" $MAIL
else
	echo -e "dDocent has finished with an analysis in" `pwd` "\n\ndDocent started" $STARTTIME "\n\ndDocent finished"`date` "\n\n" `mawk '/After filtering, kept .* out of a possible/' ./logfiles/Final.log` "\n\ndDocent 0.5 \nThe 'd' is silent, hillbilly." | mailx -s "dDocent has finished" $MAIL
fi
}


##Function definitions

#Function for trimming reads using trim_galore
TrimReads () 
{ for i in "${NAMES[@]}"
do
echo "Trimming Sample $i"
trim_galore --paired -q 10 --length 20 -a GATCGGAAGAGCACACGTCTGAACTCCAGTCACNNNNNNATATCGTATGCCGTCTTCTGCTTG -a2 GATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCG --stringency 10 $i.F.fq $i.R.fq 2> $i.trim.log
mv $i.F_val_1.fq $i.R1.fq
mv $i.R_val_2.fq $i.R2.fq
done
}

#Function to convert a file of unique sequences to fasta format
uniq2fasta()
{
i=1
cat $1 | while read line
do
echo ">Contig"$i
echo $line
i=$(($i + 1))
done
}


#Main function for assembly
Assemble()
{

#Creates a concatenated file of every read in fasta format
cat *.F.fq | mawk 'BEGIN{P=1}{if(P==1||P==2){gsub(/^[@]/,">");print}; if(P==4)P=0; P++}' > forward
cat *.R.fq | mawk 'BEGIN{P=1}{if(P==1||P==2){gsub(/^[@]/,">");print}; if(P==4)P=0; P++}' > reverse

#Reverse complements paired reads and pastes them together with forward reads with 10 Ns in between
seqtk seq -r reverse > reverseRC
mergefq.pl forward reverseRC concat.fasta

#Clean up of large files
rm forward
rm reverse
rm reverseRC

#Convert fasta format to just sequences
mawk '!/>/' concat.fasta > concat.seq

#Find every unique sequence and count the number of occurrences
perl -e 'while (<>) {chomp; $z{$_}++;} while(($k,$v) = each(%z)) {print "$v\t$k\n";}' concat.seq > uniq.seqs

#Create a data file with the number of unique sequences and the number of occurrences
ONE=$(mawk '$1 > 1' uniq.seqs | wc -l)
echo -e "1""\t""$ONE" > uniqseq.data

for ((i = 2; i <= 50; i++));
do
J=$(mawk -v x=$i '$1 > x' uniq.seqs | wc -l)
echo -e "$i""\t""$J" >> uniqseq.data
done

#Plot graph of above data
gnuplot << \EOF 
set terminal dumb size 120, 30
set autoscale 
unset label
set title "Number of Unique Sequences with X Occurrences"
set xlabel "Number of Occurrences"
set ylabel "Number of Unique Sequences
#set yr [0:100000]
plot 'uniqseq.data' with dots notitle
pause -1
EOF

#Ask user to pick cutoff
##The cutoff should roughly correlate to the expected coverage per RAD loci.  This is an easy way to get rid of reads only corresponding to a few individuals

echo -en "\007"
echo -en "\007"
echo -en "\007"
echo -e "Please choose data cutoff.  Pick point right before assymptote, probably between 10 and 30.  \n\nIt approximates the expected coverage per RAD fragment."

read CUTOFF

mawk -v x=$CUTOFF '$1 >= x' uniq.seqs | cut -f 2 > totaluniqseq


#Convert reads to fasta
uniq2fasta totaluniqseq > uniq.fasta

#Use CD-Hit to cluster reads based on similarity
cd-hit-est -i uniq.fasta -o reference.fasta -mask N -M 0 -T 0 -c $simC &>cdhit.log
wait
rm reference.dict
java -jar /usr/local/bin/CreateSequenceDictionary.jar R=reference.fasta O=reference.dict
samtools faidx reference.fasta
bwa index reference.fasta

#Prints instructions on how to move analysis to background and disown process
echo "At this point, all configuration information has been enter and dDocent may take several hours to run." 
echo "It is recommended that you move this script to a background operation and disable terminal input and output."
echo "All data and logfiles will still be recorded."
echo "To do this:"
echo "Press control and Z simultaneously"
echo "Type 'bg' without the quotes and press enter"
echo "Type 'disown -h' again without the quotes and press enter"
echo ""
echo "Now sit back, relax, and wait for your analysis to finish."
}

#Function to convert a SAM file to BAM file
SamtoBam()
{

taskset -pc "$2" samtools view -bT reference.fasta $1.sam > $1.bam 2>$1.bam.log

rm  $1.sam

taskset -pc "$2" samtools sort $1.bam $1

mv $1.bam $1-RG.bam

samtools index $1-RG.bam

}

#Function to realign BAM files using GATK
Realign()
{
java -Xmx${SmallMem}g -jar /usr/local/bin/GenomeAnalysisTK.jar \
-T IndelRealigner \
-R reference.fasta \
-I $1-RG.bam \
--LODThresholdForCleaning 3.0 \
-targetIntervals merged.intervals \
-rf BadCigar \
-o $1-RGa.bam --filter_bases_not_stored

rm $1-RG.bam

samtools index $1-RGa.bam

#Compress BAM files for GATK
java -Xmx4g -jar /usr/local/bin/GenomeAnalysisTK.jar \
   -R reference.fasta \
   -T ReduceReads \
   -I $1-RGa.bam  \
   -minvar 0.1 -dcov 60 -minqual 10 -minmap 5 \
   -o $1-RG.reduced.bam
}

##Create Realignment intervals
##This takes advantage of the fact that RAD loci are very discrete.  Instead of calculating intervals for every BAM file,
##this function first distills all the data down to only unique reads and then maps then to the reference.  This overall BAM file 
##is used to create a single list of intervals, saving a large amount of computational time.

CreateIntervals()
{
#Concatenate all reads
cat *.F.fq > forward1 
cat *.R.fq > reverse1
wait

#Split reads into 4 smaller files to reduce memory usage
NumSeqs=$(cat forward1 | wc -l)
NumSeqs=$(( $NumSeqs / 4 ))
split -l $NumSeqs forward1 fw
split -l $NumSeqs reverse1 rw
wait

#Remove all duplicate reads
clone_filter -1 fwaa -2 rwaa
clone_filter -1 fwab -2 rwab
clone_filter -1 fwac -2 rwac
clone_filter -1 fwad -2 rwad
wait

cat *.fq_1 > fw
cat *.fq_2 > rw

rm *.fq_1 *.fq_2

clone_filter -1 fw -2 rw

mv fw.fil.fq_1 forward1
mv rw.fil.fq_2 reverse1

#Map reads to reference
bwa mem reference.fasta forward1 reverse1 -t $NUMProc -a -M -T 10 -A $optA -B $optB -O $optO -R "@RG\tID:cat\tSM:cat\tPL:Illumina" | samtools view -q1 -SbT reference.fasta - > cat.bam 2>cat.bam.log

rm forward1 fw*
rm reverse1 rw*

wait

samtools sort cat.bam cat 
mv cat.bam cat-RG.bam
samtools index cat-RG.bam 
wait

#Create intervals
bamToBed -i cat-RG.bam > map.bed
bedtools merge -i map.bed > mapped.bed
java -Xmx${SmallMem}g -jar /usr/local/bin/GenomeAnalysisTK.jar \
-T RealignerTargetCreator \
-R reference.fasta \
-I cat-RG.bam \
-rf BadCigar \
-o merged.intervals \
-log RTC.log \
-dcov 200 \
-nt $NUMThr 
}

#Function to covert multiple SAM files to BAM files simultaneously
pBAM()
{
Len=$(($NumInd - 1))
for ((i = 0 ; i <= $Len ; i += 10));
do
j=$(($i+1))
k=$(($j+1))
l=$(($k+1))
m=$(($l+1))
n=$(($m+1))
o=$(($n+1))
p=$(($o+1))
q=$(($p+1))
r=$(($q+1))
if [ "$i" -le "$Len" ]; then
	SamtoBam ${NAMES[$i]} 00 &
	fi
if [ "$j" -le "$Len" ]; then
	SamtoBam ${NAMES[$j]} 01 &
	fi
if [ "$k" -le "$Len" ]; then
	SamtoBam ${NAMES[$k]} 02 &
	fi
if [ "$l" -le "$Len" ]; then
	SamtoBam ${NAMES[$l]} 03 &
	fi
if [ "$m" -le "$Len" ]; then
	SamtoBam ${NAMES[$m]} 04 &
	fi
if [ "$n" -le "$Len" ]; then
	SamtoBam ${NAMES[$n]} 05 &
	fi	
if [ "$o" -le "$Len" ]; then
	SamtoBam ${NAMES[$o]} 06 &
	fi
if [ "$p" -le "$Len" ]; then
	SamtoBam ${NAMES[$p]} 07 &
	fi
if [ "$q" -le "$Len" ]; then
	SamtoBam ${NAMES[$q]} 08 &
	fi
if [ "$r" -le "$Len" ]; then
	SamtoBam ${NAMES[$r]} 09	
	fi		
wait	
done
}

#Function to realign and compress multiple BAM files simultaneously
pAlign()
{
Len=$(($NumInd - 1))
for ((i = 0 ; i <= $Len ; i += 10));
do
j=$(($i+1))
k=$(($j+1))
l=$(($k+1))
m=$(($l+1))
n=$(($m+1))
o=$(($n+1))
p=$(($o+1))
q=$(($p+1))
r=$(($q+1))
if [ "$i" -le "$Len" ]; then
	Realign ${NAMES[$i]} &
	fi
if [ "$j" -le "$Len" ]; then
	Realign ${NAMES[$j]} &
	fi
if [ "$k" -le "$Len" ]; then
	Realign ${NAMES[$k]} &
	fi
if [ "$l" -le "$Len" ]; then
	Realign ${NAMES[$l]} &
	fi
if [ "$m" -le "$Len" ]; then
	Realign ${NAMES[$m]} &
	fi
if [ "$n" -le "$Len" ]; then
	Realign ${NAMES[$n]} &
	fi	
if [ "$o" -le "$Len" ]; then
	Realign ${NAMES[$o]} &
	fi
if [ "$p" -le "$Len" ]; then
	Realign ${NAMES[$p]} &
	fi
if [ "$q" -le "$Len" ]; then
	Realign ${NAMES[$q]} &
	fi
if [ "$r" -le "$Len" ]; then
	Realign ${NAMES[$r]} 	
	fi	
	wait
done	
}

#Function to call SNPs over a given population set and reference interval with a 5% minimum for minor allele frequency
Genotype()
{
    	    echo "Using HaplotypeCaller"
            NumIndpop=$(cat bamlist.$2.list | wc -l)
			NumIndpop=$(($NumIndpop - 0))
            Prun=$((NumIndpop / 20))
			if [ $Prun -lt 1 ]; then
            Prun=1
            fi
			java -XX:+UseParallelGC -XX:ParallelGCThreads=8 -Xmx${LargeMem}g -jar /usr/local/bin/GenomeAnalysisTK.jar -R reference.fasta -T HaplotypeCaller -I bamlist.$2.list \
   			-o rawVariants.$2.$1.vcf -stand_call_conf 10.0 -stand_emit_conf 5.0 --min_mapping_quality_score 5 --heterozygosity 0.01 \
   			--numPruningSamples $Prun -nct $NUMProc -log HC.$2.$1.log -L mapped.$1.bed -globalMAPQ -1 -dcov 200 --logging_level INFO \
   			--mergeVariantsViaLD &>HC.$2.$1.error.log
       
}
#Function to iterate the above function and detect and rerun any intervals producing errors.  It also emails me for debugging purposes
GenotypePop()
{
for ((i = 1; i <= 4; i++));
do
Genotype $i $1
GenoError=$(mawk '/ERROR/' *.$i.error.log | wc -l)
GenoError=$(($GenoError + 0))        
	if [ $GenoError -gt 0 ]; then
		echo "Genotyping Error, rerunning interval"
		echo -e "dDocent had a haplotype error and had to rerun" | mailx -s "dDocent has an error" jpuritz@gmail.com
		Genotype $i $1
		GenoError2=$(mawk '/ERROR/' *.$i.error.log | wc -l)
		GenoError2=$(($GenoError2 + 0)) 
			if [ $GenoError2 -gt 0 ]; then
				echo "Genotyping Error, rerunning interval for second time.  Check all output and logs after completion for additional errors."
				Genotype $i $1
				fi
		
	fi
done	
#Gathers all SNP data
java -Xmx${SmallMem}g -cp /usr/local/bin/GenomeAnalysisTK.jar org.broadinstitute.sting.tools.CatVariants \
-R reference.fasta -V rawVariants.$1.1.vcf -V rawVariants.$1.2.vcf -V rawVariants.$1.3.vcf -V rawVariants.$1.4.vcf  \
-out rawVariants.pop.$1.vcf -assumeSorted
}

#Actually starts program
main


